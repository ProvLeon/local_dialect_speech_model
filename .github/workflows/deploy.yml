name: Deploy Twi Speech Model

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "staging"
        type: choice
        options:
          - development
          - staging
          - production
      deploy_target:
        description: "Deployment target"
        required: true
        default: "local"
        type: choice
        options:
          - local
          - kubernetes
          - aws-ecs

env:
  PYTHON_VERSION: "3.9"
  MODEL_NAME: "twi-speech-model"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsndfile1 ffmpeg

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting
        run: |
          black --check .
          isort --check-only .

      - name: Run tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.9'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            trivy-results.sarif
            bandit-report.json

  validate-model:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsndfile1 ffmpeg
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate model files
        run: |
          python scripts/package_model.py --validate-only --verbose

      - name: Run model performance tests
        run: |
          python -m pytest tests/test_model_performance.py -v

  build-and-package:
    runs-on: ubuntu-latest
    needs: [test, security-scan, validate-model]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      package-version: ${{ steps.package.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsndfile1 ffmpeg
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Package model
        id: package
        run: |
          python scripts/package_model.py --output-dir dist --verbose
          echo "version=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

      - name: Upload package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: model-package
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "docker-trivy-results.sarif"

      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "docker-trivy-results.sarif"

  deploy-development:
    runs-on: ubuntu-latest
    needs: [build-and-package]
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deployment dependencies
        run: |
          pip install pyyaml requests

      - name: Download package artifacts
        uses: actions/download-artifact@v3
        with:
          name: model-package
          path: dist/

      - name: Deploy to development
        run: |
          python scripts/deploy.py deploy \
            --environment development \
            --target local \
            --image-tag ${{ needs.build-and-package.outputs.image-tag }} \
            --verbose
        env:
          DEPLOYMENT_CONFIG: .github/deployment-config.yaml

      - name: Run smoke tests
        run: |
          sleep 30  # Wait for service to start
          python tests/smoke_tests.py --environment development

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          message: |
            Development deployment ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Image: ${{ needs.build-and-package.outputs.image-tag }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-package]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deployment dependencies
        run: |
          pip install pyyaml requests

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Set up Kubernetes context
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          python scripts/deploy.py deploy \
            --environment staging \
            --target kubernetes \
            --image-tag ${{ needs.build-and-package.outputs.image-tag }} \
            --verbose
        env:
          KUBECONFIG: kubeconfig

      - name: Run integration tests
        run: |
          sleep 60  # Wait for k8s deployment
          python tests/integration_tests.py --environment staging

      - name: Performance benchmarks
        run: |
          python tests/performance_tests.py --environment staging --report-file staging-perf-report.json

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: staging-performance-report
          path: staging-perf-report.json

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-package, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deployment dependencies
        run: |
          pip install pyyaml requests boto3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy to production
        run: |
          python scripts/deploy.py deploy \
            --environment production \
            --target aws-ecs \
            --image-tag ${{ needs.build-and-package.outputs.image-tag }} \
            --verbose

      - name: Run production health checks
        run: |
          sleep 120  # Wait for ECS deployment
          python tests/health_checks.py --environment production

      - name: Create deployment record
        run: |
          python scripts/create_deployment_record.py \
            --environment production \
            --version ${{ github.ref_name }} \
            --image-tag ${{ needs.build-and-package.outputs.image-tag }} \
            --commit ${{ github.sha }}

      - name: Notify success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: "#deployments"
          message: |
            🚀 Production deployment successful!
            Version: ${{ github.ref_name }}
            Image: ${{ needs.build-and-package.outputs.image-tag }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback-production:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deployment dependencies
        run: |
          pip install pyyaml requests boto3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Rollback production deployment
        run: |
          python scripts/deploy.py rollback \
            --environment production \
            --verbose

      - name: Verify rollback
        run: |
          sleep 60
          python tests/health_checks.py --environment production

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "⚠️ Production rollback completed",
              "attachments": [{
                "color": "warning",
                "fields": [{
                  "title": "Environment",
                  "value": "Production",
                  "short": true
                }, {
                  "title": "Reason",
                  "value": "Deployment failure",
                  "short": true
                }, {
                  "title": "Commit",
                  "value": "${{ github.sha }}",
                  "short": true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Clean up old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            const oldArtifacts = artifacts.data.artifacts.filter(artifact => {
              const ageInDays = (Date.now() - new Date(artifact.created_at)) / (1000 * 60 * 60 * 24);
              return ageInDays > 7;
            });

            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }

      - name: Clean up old container images
        uses: actions/github-script@v7
        with:
          script: |
            const packages = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
              package_type: 'container',
              package_name: context.repo.repo,
              org: context.repo.owner,
            });

            const oldPackages = packages.data.filter(pkg => {
              const ageInDays = (Date.now() - new Date(pkg.created_at)) / (1000 * 60 * 60 * 24);
              return ageInDays > 30 && !pkg.metadata.container.tags.includes('latest');
            });

            for (const pkg of oldPackages) {
              await github.rest.packages.deletePackageVersionForOrg({
                package_type: 'container',
                package_name: context.repo.repo,
                org: context.repo.owner,
                package_version_id: pkg.id,
              });
            }
